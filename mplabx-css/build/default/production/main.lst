CCS PCM C Compiler, Version 5.051, 5967               14-окт-18 17:25

               Filename:   D:\Projects\iot-esp-web\uc\mplabx-css\build\default\production\main.lst

               ROM used:   148 words (2%)
                           Largest free fragment is 2048
               RAM used:   11 (1%) at main() level
                           24 (2%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 16

*
0000:  MOVLP  00
0001:  GOTO   05A
0002:  NOP
*
0004:  CLRF   03
0005:  MOVLP  00
0006:  MOVLB  00
0007:  MOVF   77,W
0008:  MOVWF  20
0009:  MOVF   78,W
000A:  MOVWF  21
000B:  MOVF   79,W
000C:  MOVWF  22
000D:  MOVF   7A,W
000E:  MOVWF  23
000F:  CLRF   05
0010:  MOVLW  91
0011:  MOVWF  04
0012:  BTFSS  00.4
0013:  GOTO   016
0014:  BTFSC  11.4
0015:  GOTO   026
0016:  CLRF   05
0017:  MOVLW  91
0018:  MOVWF  04
0019:  BTFSS  00.5
001A:  GOTO   01D
001B:  BTFSC  11.5
001C:  GOTO   028
001D:  MOVF   20,W
001E:  MOVWF  77
001F:  MOVF   21,W
0020:  MOVWF  78
0021:  MOVF   22,W
0022:  MOVWF  79
0023:  MOVF   23,W
0024:  MOVWF  7A
0025:  RETFIE
0026:  MOVLP  00
0027:  GOTO   03B
0028:  MOVLP  00
0029:  GOTO   030
.................... /*  
....................  * File:   main.c 
....................  * Author: Riko 
....................  * 
....................  * Created on 04 10 2018, 14:57 
....................  */ 
.................... #include <16LF1825.h> 
.................... //////////// Standard Header file for the PIC16LF1825 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16LF1825 
....................  
.................... #list 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (127) 
.................... #define INT8_MIN  (-128) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (127) 
.................... #define INT_LEAST8_MIN  (-128) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (127) 
.................... #define INT_FAST8_MIN  (-128) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... /* 
....................  *  
....................  */ 
.................... #fuses INTRC_IO, NOWDT,NOMCLR, NOCLKOUT, PLL 
.................... #USE DELAY (int=32MHZ, PLL_WAIT) 
*
0045:  MOVLW  20
0046:  MOVWF  05
0047:  MOVLW  06
0048:  MOVWF  04
0049:  MOVF   00,W
004A:  BTFSC  03.2
004B:  GOTO   059
004C:  MOVLW  0A
004D:  MOVWF  78
004E:  CLRF   77
004F:  DECFSZ 77,F
0050:  GOTO   04F
0051:  DECFSZ 78,F
0052:  GOTO   04E
0053:  MOVLW  5F
0054:  MOVWF  77
0055:  DECFSZ 77,F
0056:  GOTO   055
0057:  DECFSZ 00,F
0058:  GOTO   04C
0059:  RETURN
....................  
.................... #USE RS232 (UART1, BAUD=115200) 
*
002A:  BTFSS  11.4
002B:  GOTO   02A
002C:  MOVLB  03
002D:  MOVWF  1A
002E:  MOVLB  00
002F:  RETURN
....................  
.................... void main(void) { 
*
005A:  MOVLW  F0
005B:  MOVLB  01
005C:  MOVWF  19
005D:  BTFSS  1A.6
005E:  GOTO   05D
005F:  MOVLB  03
0060:  BSF    1F.3
0061:  MOVLW  44
0062:  MOVWF  1B
0063:  MOVLW  00
0064:  MOVWF  1C
0065:  MOVLW  A6
0066:  MOVWF  1E
0067:  MOVLW  90
0068:  MOVWF  1D
0069:  CLRF   0C
006A:  CLRF   0E
006B:  MOVLB  02
006C:  CLRF   12
006D:  CLRF   11
006E:  CLRF   14
006F:  CLRF   13
....................     disable_interrupts(GLOBAL); 
0070:  BCF    0B.6
0071:  BCF    0B.7
0072:  BTFSC  0B.7
0073:  GOTO   071
....................     enable_interrupts(INT_RDA); 
0074:  MOVLB  01
0075:  BSF    11.5
....................     enable_interrupts(INT_TBE); //If I comment this line the Rx works well and I see 'R' printed on the terminal 
0076:  BSF    11.4
....................     enable_interrupts(GLOBAL); 
0077:  MOVLW  C0
0078:  IORWF  0B,F
....................  
....................     while(TRUE){ 
....................         output_high(PIN_C2); 
0079:  BCF    0E.2
007A:  MOVLB  02
007B:  BSF    0E.2
....................         delay_ms(500); 
007C:  MOVLW  02
007D:  MOVLB  00
007E:  MOVWF  25
007F:  MOVLW  FA
0080:  MOVWF  26
0081:  CALL   045
0082:  DECFSZ 25,F
0083:  GOTO   07F
....................         output_low(PIN_C2); 
0084:  MOVLB  01
0085:  BCF    0E.2
0086:  MOVLB  02
0087:  BCF    0E.2
....................         delay_ms(500); 
0088:  MOVLW  02
0089:  MOVLB  00
008A:  MOVWF  25
008B:  MOVLW  FA
008C:  MOVWF  26
008D:  CALL   045
008E:  DECFSZ 25,F
008F:  GOTO   08B
....................         putc('R'); 
0090:  MOVLW  52
0091:  CALL   02A
0092:  MOVLB  01
0093:  GOTO   079
....................          
....................     } 
.................... } 
....................  
.................... #INT_RDA 
.................... void Rx_Da_INT(void){ 
0094:  SLEEP
....................     char c; 
....................     c = getc(); 
*
0030:  BTFSS  11.5
0031:  GOTO   030
0032:  MOVLB  03
0033:  MOVF   19,W
0034:  MOVLB  00
0035:  MOVWF  27
....................     putc(c); 
0036:  MOVF   27,W
0037:  CALL   02A
.................... } 
0038:  BCF    11.5
0039:  MOVLP  00
003A:  GOTO   01D
.................... #INT_TBE 
.................... void Tx_Be_INT(void){ 
....................     output_low(PIN_C2); 
003B:  MOVLB  01
003C:  BCF    0E.2
003D:  MOVLB  02
003E:  BCF    0E.2
.................... disable_interrupts(INT_TBE); 
003F:  MOVLB  01
0040:  BCF    11.4
0041:  MOVLB  00
0042:  BCF    11.4
0043:  MOVLP  00
0044:  GOTO   01D
.................... } 

Configuration Fuses:
   Word  1: 3F84   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1613   NOWRT PLL_SW STVREN BORV19 NODEBUG NOLVP

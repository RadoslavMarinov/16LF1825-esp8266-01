D G "__PCM__" 0 0 ""5.051""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""14-окт-18""
D G "__TIME__" 0 0 ""17:29:04""
D G "_UNICODE" 0 0 ""?""
D G "__EVAL" 0 0 ""?""
D G "__DEBUG" 0 0 "1"
D G "__16LF1825" 0 0 "1" "* File:   main.c"
C G "" 0 1 1 "*"
C G "" 0 1 1 "*"
c L "set_tris_a" 1 1 6 "FUNCTION"
f N "set_tris_a" 1 39 ""
v L "value" 1 39 "int8" `54 
f B "set_tris_a" 1 39 "void(int8 value)" `53 
f N "set_tris_c" 1 40 ""
v L "value" 1 40 "int8" `56 
f B "set_tris_c" 1 40 "void(int8 value)" `55 
f N "get_tris_a" 1 41 ""
f B "get_tris_a" 1 41 "int8()" `57 
f N "get_tris_c" 1 42 ""
f B "get_tris_c" 1 42 "int8()" `58 
f N "output_a" 1 43 ""
v L "value" 1 43 "int8" `60 
f B "output_a" 1 43 "void(int8 value)" `59 
f N "output_c" 1 44 ""
v L "value" 1 44 "int8" `62 
f B "output_c" 1 44 "void(int8 value)" `61 
f N "input_a" 1 45 ""
f B "input_a" 1 45 "int8()" `63 
f N "input_c" 1 46 ""
f B "input_c" 1 46 "int8()" `64 
f N "input_change_a" 1 47 ""
f B "input_change_a" 1 47 "int8()" `65 
f N "input_change_c" 1 48 ""
f B "input_change_c" 1 48 "int8()" `66 
f N "port_a_pullups" 1 49 ""
v L "upmask" 1 49 "int8" `68 
f B "port_a_pullups" 1 49 "void(int8 upmask)" `67 
f N "port_b_pullups" 1 50 ""
v L "value" 1 50 "int8" `70 
f B "port_b_pullups" 1 50 "void(int8 value)" `69 
f N "port_c_pullups" 1 51 ""
v L "upmask" 1 51 "int8" `72 
f B "port_c_pullups" 1 51 "void(int8 upmask)" `71 
f N "input" 1 52 ""
v L "pin" 1 52 "int16" `74 
f B "input" 1 52 "int8(int16 pin)" `73 
f N "input_state" 1 53 ""
v L "pin" 1 53 "int16" `76 
f B "input_state" 1 53 "int8(int16 pin)" `75 
f N "output_low" 1 54 ""
v L "pin" 1 54 "int16" `78 
f B "output_low" 1 54 "void(int16 pin)" `77 
f N "output_high" 1 55 ""
v L "pin" 1 55 "int16" `80 
f B "output_high" 1 55 "void(int16 pin)" `79 
f N "output_toggle" 1 56 ""
v L "pin" 1 56 "int16" `82 
f B "output_toggle" 1 56 "void(int16 pin)" `81 
f N "output_bit" 1 57 ""
v L "pin" 1 57 "int16" `84 
v L "level" 1 57 "int8" `85 
f B "output_bit" 1 57 "void(int16 pin,int8 level)" `83 
f N "output_float" 1 58 ""
v L "pin" 1 58 "int16" `87 
f B "output_float" 1 58 "void(int16 pin)" `86 
f N "output_drive" 1 59 ""
v L "pin" 1 59 "int16" `89 
f B "output_drive" 1 59 "void(int16 pin)" `88  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 63 "96"
d G "PIN_A1" 1 64 "97"
d G "PIN_A2" 1 65 "98"
d G "PIN_A3" 1 66 "99"
d G "PIN_A4" 1 67 "100"
d G "PIN_A5" 1 68 "101"
d G "PIN_C0" 1 70 "112"
d G "PIN_C1" 1 71 "113"
d G "PIN_C2" 1 72 "114"
d G "PIN_C3" 1 73 "115"
d G "PIN_C4" 1 74 "116"
d G "PIN_C5" 1 75 "117"
d G "FALSE" 1 78 "0"
d G "TRUE" 1 79 "1"
d G "BYTE" 1 81 "int8"
d G "BOOLEAN" 1 82 "int1"
d G "getc" 1 84 "getch"
d G "fgetc" 1 85 "getch"
d G "getchar" 1 86 "getch"
d G "putc" 1 87 "putchar"
d G "fputc" 1 88 "putchar"
d G "fgets" 1 89 "gets"
d G "fputs" 1 90 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f N "restart_cause" 1 95 ""
f B "restart_cause" 1 95 "int8()" `90 
f N "reset_cpu" 1 96 ""
f B "reset_cpu" 1 96 "void()" `91 
f N "sleep" 1 97 ""
f B "sleep" 1 97 "void()" `92  "Constants returned from RESTART_CAUSE() are:"
d G "NORMAL_POWER_UP" 1 99 "0x3C"
d G "MCLR_FROM_POWER_UP" 1 100 "0x34"
d G "BROWNOUT_RESTART" 1 101 "0x3E"
d G "MCLR_FROM_SLEEP" 1 102 "0x27"
d G "WDT_TIMEOUT" 1 103 "0x1F"
d G "WDT_FROM_SLEEP" 1 104 "0x0F"
d G "INTERRUPT_FROM_SLEEP" 1 105 "0x2F"
d G "MCLR_FROM_RUN" 1 106 "0x37"
d G "RESET_INSTRUCTION" 1 107 "0x3B"
d G "STACK_OVERFLOW" 1 108 "0xBF"
d G "STACK_UNDERFLOW" 1 109 "0x7F"
c L "sleep" 1 1 5 "FUNCTION"
f N "setup_timer_0" 1 116 ""
v L "mode" 1 116 "int8" `94 
f B "setup_timer_0" 1 116 "void(int8 mode)" `93 
f N "set_timer0" 1 117 ""
v L "value" 1 117 "int8" `96 
f B "set_timer0" 1 117 "void(int8 value)" `95 
f N "get_timer0" 1 118 ""
f B "get_timer0" 1 118 "int8()" `97 
f N "setup_counters" 1 119 ""
v L "mode" 1 119 "int8" `99 
v L "prescaler" 1 119 "int8" `100 
f B "setup_counters" 1 119 "void(int8 mode,int8 prescaler)" `98 
f N "set_rtcc" 1 120 ""
v L "value" 1 120 "int8" `102 
f B "set_rtcc" 1 120 "void(int8 value)" `101 
f N "get_rtcc" 1 121 ""
f B "get_rtcc" 1 121 "int8()" `103  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 123 "0"
d G "T0_EXT_L_TO_H" 1 124 "32"
d G "T0_EXT_H_TO_L" 1 125 "48"
d G "T0_DIV_1" 1 127 "8"
d G "T0_DIV_2" 1 128 "0"
d G "T0_DIV_4" 1 129 "1"
d G "T0_DIV_8" 1 130 "2"
d G "T0_DIV_16" 1 131 "3"
d G "T0_DIV_32" 1 132 "4"
d G "T0_DIV_64" 1 133 "5"
d G "T0_DIV_128" 1 134 "6"
d G "T0_DIV_256" 1 135 "7"
d G "T0_8_BIT" 1 138 "0"
d G "RTCC_INTERNAL" 1 142 "0"
d G "RTCC_EXT_L_TO_H" 1 143 "32"
d G "RTCC_EXT_H_TO_L" 1 144 "48"
d G "RTCC_DIV_1" 1 145 "8"
d G "RTCC_DIV_2" 1 146 "0"
d G "RTCC_DIV_4" 1 147 "1"
d G "RTCC_DIV_8" 1 148 "2"
d G "RTCC_DIV_16" 1 149 "3"
d G "RTCC_DIV_32" 1 150 "4"
d G "RTCC_DIV_64" 1 151 "5"
d G "RTCC_DIV_128" 1 152 "6"
d G "RTCC_DIV_256" 1 153 "7"
d G "RTCC_8_BIT" 1 154 "0"
c L "get_rtcc" 1 1 7 "FUNCTION"
f N "setup_wdt" 1 164 ""
v L "mode" 1 164 "int16" `105 
f B "setup_wdt" 1 164 "void(int16 mode)" `104 
f N "restart_wdt" 1 165 ""
f B "restart_wdt" 1 165 "void()" `106  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 167 "0x1000"
d G "WDT_OFF" 1 168 "0x2000"
d G "WDT_1MS" 1 170 "0x100"
d G "WDT_2MS" 1 171 "0x101"
d G "WDT_4MS" 1 172 "0x102"
d G "WDT_8MS" 1 173 "0x103"
d G "WDT_16MS" 1 174 "0x104"
d G "WDT_32MS" 1 175 "0x105"
d G "WDT_64MS" 1 176 "0x106"
d G "WDT_128MS" 1 177 "0x107"
d G "WDT_256MS" 1 178 "0x108"
d G "WDT_512MS" 1 179 "0x109"
d G "WDT_1S" 1 180 "0x10A"
d G "WDT_2S" 1 181 "0x10B"
d G "WDT_4S" 1 182 "0x10C"
d G "WDT_8S" 1 183 "0x10D"
d G "WDT_16S" 1 184 "0x10E"
d G "WDT_32S" 1 185 "0x10F"
d G "WDT_64S" 1 186 "0x110"
d G "WDT_128S" 1 187 "0x111"
d G "WDT_256S" 1 188 "0x112"
c L "restart_wdt" 1 1 3 "FUNCTION"
f N "setup_timer_1" 1 193 ""
v L "mode" 1 193 "int16" `108 
f B "setup_timer_1" 1 193 "void(int16 mode)" `107 
f N "get_timer1" 1 194 ""
f B "get_timer1" 1 194 "int16()" `109 
f N "set_timer1" 1 195 ""
v L "value" 1 195 "int16" `111 
f B "set_timer1" 1 195 "void(int16 value)" `110  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 198 "0"
d G "T1_CAPSENSE" 1 199 "0xC5"
d G "T1_EXTERNAL" 1 200 "0x85"
d G "T1_EXTERNAL_SYNC" 1 201 "0x81"
d G "T1_FOSC" 1 202 "0x45"
d G "T1_INTERNAL" 1 203 "0x05"
d G "T1_ENABLE_T1OSC" 1 205 "0x08"
d G "T1_DIV_BY_1" 1 207 "0x00"
d G "T1_DIV_BY_2" 1 208 "0x10"
d G "T1_DIV_BY_4" 1 209 "0x20"
d G "T1_DIV_BY_8" 1 210 "0x30"
d G "T1_GATE" 1 212 "0x8000"
d G "T1_GATE_INVERTED" 1 213 "0xC000"
d G "T1_GATE_TOGGLE" 1 214 "0xA000"
d G "T1_GATE_SINGLE" 1 215 "0x9000"
d G "T1_GATE_TIMER0" 1 216 "0x8100"
d G "T1_GATE_COMP1" 1 217 "0x8200"
d G "T1_GATE_COMP2" 1 218 "0x8300"
d G "T1_GATE_A4" 1 220 "0"
d G "T1_GATE_A3" 1 221 "0x10000"
c L "set_timer1" 1 1 3 "FUNCTION"
f N "setup_timer_2" 1 226 ""
v L "mode" 1 226 "int8" `113 
v L "period" 1 226 "int8" `114 
v L "postscale" 1 226 "int8" `115 
f B "setup_timer_2" 1 226 "void(int8 mode,int8 period,int8 postscale)" `112 
f N "get_timer2" 1 227 ""
f B "get_timer2" 1 227 "int8()" `116 
f N "set_timer2" 1 228 ""
v L "value" 1 228 "int8" `118 
f B "set_timer2" 1 228 "void(int8 value)" `117  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 230 "0"
d G "T2_DIV_BY_1" 1 231 "4"
d G "T2_DIV_BY_4" 1 232 "5"
d G "T2_DIV_BY_16" 1 233 "6"
d G "T2_DIV_BY_64" 1 234 "7"
c L "set_timer2" 1 1 3 "FUNCTION"
f N "setup_timer_4" 1 239 ""
v L "mode" 1 239 "int16" `120 
v L "period" 1 239 "int8" `121 
v L "postscaler" 1 239 "int8" `122 
f B "setup_timer_4" 1 239 "void(int16 mode,int8 period,int8 postscaler)" `119 
f N "get_timer4" 1 240 ""
f B "get_timer4" 1 240 "int8()" `123 
f N "set_timer4" 1 241 ""
v L "value" 1 241 "int8" `125 
f B "set_timer4" 1 241 "void(int8 value)" `124  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 1 243 "0"
d G "T4_DIV_BY_1" 1 244 "4"
d G "T4_DIV_BY_4" 1 245 "5"
d G "T4_DIV_BY_16" 1 246 "6"
d G "T4_DIV_BY_64" 1 247 "7"
c L "set_timer4" 1 1 3 "FUNCTION"
f N "setup_timer_6" 1 252 ""
v L "mode" 1 252 "int16" `127 
v L "period" 1 252 "int8" `128 
v L "postscaler" 1 252 "int8" `129 
f B "setup_timer_6" 1 252 "void(int16 mode,int8 period,int8 postscaler)" `126 
f N "get_timer6" 1 253 ""
f B "get_timer6" 1 253 "int8()" `130 
f N "set_timer6" 1 254 ""
v L "value" 1 254 "int8" `132 
f B "set_timer6" 1 254 "void(int8 value)" `131  "Constants used for SETUP_TIMER_6() are:"
d G "T6_DISABLED" 1 257 "0"
d G "T6_DIV_BY_1" 1 258 "4"
d G "T6_DIV_BY_4" 1 259 "5"
d G "T6_DIV_BY_16" 1 260 "6"
d G "T6_DIV_BY_64" 1 261 "7"
c L "set_timer6" 1 1 4 "FUNCTION"
f N "setup_ccp1" 1 267 ""
v L "mode" 1 267 "int32" `134 
f B "setup_ccp1" 1 267 "void(int32 mode)" `133 
f N "setup_ccp1" 1 268 ""
v L "mode" 1 268 "int32" `136 
v L "pwm" 1 268 "int8" `137 
f B "setup_ccp1" 1 268 "void(int32 mode,int8 pwm)" `135 
f N "set_pwm1_duty" 1 269 ""
v L "value" 1 269 "int16" `139 
f B "set_pwm1_duty" 1 269 "void(int16 value)" `138  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 271 "0"
d G "CCP_CAPTURE_FE" 1 272 "0x04"
d G "CCP_CAPTURE_RE" 1 273 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 274 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 275 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 276 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 277 "0x09"
d G "CCP_COMPARE_INT" 1 278 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 1 279 "0x0B"
d G "CCP_PWM" 1 280 "0x0C"
d G "CCP_PWM_PLUS_1" 1 281 "0x1c"
d G "CCP_PWM_PLUS_2" 1 282 "0x2c"
d G "CCP_PWM_PLUS_3" 1 283 "0x3c"
d G "CCP_PWM_H_H" 1 289 "0x0c"
d G "CCP_PWM_H_L" 1 290 "0x0d"
d G "CCP_PWM_L_H" 1 291 "0x0e"
d G "CCP_PWM_L_L" 1 292 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 294 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 295 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 296 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 298 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 299 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 300 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 301 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 302 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 303 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 304 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 306 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 307 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 308 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 310 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 311 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 312 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 314 "0x80000000"
d G "CCP_PULSE_STEERING_A" 1 316 "0x01000000"
d G "CCP_PULSE_STEERING_B" 1 317 "0x02000000"
d G "CCP_PULSE_STEERING_C" 1 318 "0x04000000"
d G "CCP_PULSE_STEERING_D" 1 319 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 1 320 "0x10000000"
d G "CCP_TIMER2" 1 323 "0x0000"
d G "CCP_TIMER4" 1 324 "0x1000"
d G "CCP_TIMER6" 1 325 "0x2000"
d G "CCP_P1C_C3" 1 327 "0x000"
d G "CCP_P1C_C1" 1 328 "0x100"
d G "CCP_P1D_C2" 1 329 "0x000"
d G "CCP_P1D_C0" 1 330 "0x200"
d G "CCP2_C3" 1 331 "0x000"
d G "CCP2_A5" 1 332 "0x100"
d G "CCP_P2B_C2" 1 333 "0x000"
d G "CCP_P2B_A4" 1 334 "0x200"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
f N "setup_ccp2" 1 338 ""
v L "mode" 1 338 "int32" `144 
f B "setup_ccp2" 1 338 "void(int32 mode)" `143 
f N "setup_ccp2" 1 339 ""
v L "mode" 1 339 "int32" `146 
v L "pwm" 1 339 "int8" `147 
f B "setup_ccp2" 1 339 "void(int32 mode,int8 pwm)" `145 
f N "set_pwm2_duty" 1 340 ""
v L "value" 1 340 "int16" `149 
f B "set_pwm2_duty" 1 340 "void(int16 value)" `148 
c L "set_pwm2_duty" 1 1 1 "FUNCTION"
f N "setup_ccp3" 1 346 ""
v L "mode" 1 346 "int32" `154 
f B "setup_ccp3" 1 346 "void(int32 mode)" `153 
f N "setup_ccp3" 1 347 ""
v L "mode" 1 347 "int32" `156 
v L "pwm" 1 347 "int8" `157 
f B "setup_ccp3" 1 347 "void(int32 mode,int8 pwm)" `155 
f N "set_pwm3_duty" 1 348 ""
v L "value" 1 348 "int16" `159 
f B "set_pwm3_duty" 1 348 "void(int16 value)" `158 
c L "set_pwm3_duty" 1 1 1 "FUNCTION"
f N "setup_ccp4" 1 354 ""
v L "mode" 1 354 "int32" `164 
f B "setup_ccp4" 1 354 "void(int32 mode)" `163 
f N "setup_ccp4" 1 355 ""
v L "mode" 1 355 "int32" `166 
v L "pwm" 1 355 "int8" `167 
f B "setup_ccp4" 1 355 "void(int32 mode,int8 pwm)" `165 
f N "set_pwm4_duty" 1 356 ""
v L "value" 1 356 "int16" `169 
f B "set_pwm4_duty" 1 356 "void(int16 value)" `168 
c L "set_pwm4_duty" 1 1 3 "FUNCTION"
f N "setup_spi" 1 363 ""
v L "mode" 1 363 "int32" `174 
f B "setup_spi" 1 363 "void(int32 mode)" `173 
f N "spi_write" 1 364 ""
v L "value" 1 364 "int8" `176 
f B "spi_write" 1 364 "void(int8 value)" `175 
f N "spi_read" 1 365 ""
f B "spi_read" 1 365 "int8()" `177 
f N "spi_read" 1 366 ""
v L "value" 1 366 "int8" `179 
f B "spi_read" 1 366 "int8(int8 value)" `178 
f N "spi_data_in" 1 367 ""
f B "spi_data_in" 1 367 "int8()" `180  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 369 "0x00"
d G "SPI_MASTER" 1 370 "0x20"
d G "SPI_SLAVE" 1 371 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 372 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 373 "0x00"
d G "SPI_CLK_DIV_4" 1 374 "0x00"
d G "SPI_CLK_DIV_16" 1 375 "0x01"
d G "SPI_CLK_DIV_64" 1 376 "0x02"
d G "SPI_CLK_T2" 1 377 "0x03"
d G "SPI_SS_DISABLED" 1 378 "0x01"
d G "SPI_DO_C2" 1 380 "0x00000"
d G "SPI_DO_A4" 1 381 "0x10000"
d G "SPI_SS_C3" 1 382 "0x00000"
d G "SPI_SS_A3" 1 383 "0x20000"
d G "SPI_XMIT_L_TO_H" 1 385 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 386 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 388 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 389 "0x8000"
d G "SPI_L_TO_H" 1 392 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 393 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 1 2 "FUNCTION"
f N "setup_uart" 1 397 ""
v L "baud" 1 397 "int32" `182 
f B "setup_uart" 1 397 "void(int32 baud)" `181 
f N "setup_uart" 1 398 ""
v L "baud" 1 398 "int32" `184 
v L "stream" 1 398 "int8" `185 
f B "setup_uart" 1 398 "void(int32 baud,int8 stream)" `183 
f N "setup_uart" 1 399 ""
v L "baud" 1 399 "int32" `187 
v L "stream" 1 399 "int8" `188 
v L "clock" 1 399 "int32" `189 
f B "setup_uart" 1 399 "void(int32 baud,int8 stream,int32 clock)" `186 
f N "set_uart_speed" 1 400 ""
v L "baud" 1 400 "int32" `191 
f B "set_uart_speed" 1 400 "void(int32 baud)" `190 
f N "set_uart_speed" 1 401 ""
v L "baud" 1 401 "int32" `193 
v L "stream" 1 401 "int8" `194 
f B "set_uart_speed" 1 401 "void(int32 baud,int8 stream)" `192 
f N "set_uart_speed" 1 402 ""
v L "baud" 1 402 "int32" `196 
v L "stream" 1 402 "int8" `197 
v L "clock" 1 402 "int32" `198 
f B "set_uart_speed" 1 402 "void(int32 baud,int8 stream,int32 clock)" `195  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 406 "2"
d G "UART_DATA" 1 407 "4"
d G "UART_AUTODETECT" 1 408 "8"
d G "UART_AUTODETECT_NOWAIT" 1 409 "9"
d G "UART_WAKEUP_ON_RDA" 1 410 "10"
d G "UART_SEND_BREAK" 1 411 "13"
c L "set_uart_speed" 1 1 3 "FUNCTION"
f N "setup_comparator" 1 415 ""
v L "mode" 1 415 "int32" `200 
f B "setup_comparator" 1 415 "void(int32 mode)" `199  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 418 "0x00"
d G "CP1_A1_A0" 1 421 "0x8000"
d G "CP1_C1_A0" 1 422 "0x8001"
d G "CP1_C2_A0" 1 423 "0x8002"
d G "CP1_C3_A0" 1 424 "0x8003"
d G "CP1_A1_DAC" 1 425 "0x8010"
d G "CP1_C1_DAC" 1 426 "0x8011"
d G "CP1_C2_DAC" 1 427 "0x8012"
d G "CP1_C3_DAC" 1 428 "0x8013"
d G "CP1_A1_FVR" 1 429 "0x8020"
d G "CP1_C1_FVR" 1 430 "0x8021"
d G "CP1_C2_FVR" 1 431 "0x8022"
d G "CP1_C3_FVR" 1 432 "0x8023"
d G "CP1_A1_VSS" 1 433 "0x8030"
d G "CP1_C1_VSS" 1 434 "0x8031"
d G "CP1_C2_VSS" 1 435 "0x8032"
d G "CP1_C3_VSS" 1 436 "0x8033"
d G "CP1_INT_L2H" 1 438 "0x0080"
d G "CP1_INT_H2L" 1 439 "0x0040"
d G "CP1_OUT_ON_A2" 1 440 "0x2000"
d G "CP1_INVERT" 1 441 "0x1000"
d G "CP1_FAST" 1 442 "0x0400"
d G "CP1_HYST" 1 443 "0x0200"
d G "CP1_SYNC" 1 444 "0x0100"
d G "CP2_A1_C0" 1 447 "0x80000000"
d G "CP2_C1_C0" 1 448 "0x80010000"
d G "CP2_C2_C0" 1 449 "0x80020000"
d G "CP2_C3_C0" 1 450 "0x80030000"
d G "CP2_A1_DAC" 1 451 "0x80100000"
d G "CP2_C1_DAC" 1 452 "0x80110000"
d G "CP2_C2_DAC" 1 453 "0x80120000"
d G "CP2_C3_DAC" 1 454 "0x80130000"
d G "CP2_A1_FVR" 1 455 "0x80200000"
d G "CP2_C1_FVR" 1 456 "0x80210000"
d G "CP2_C2_FVR" 1 457 "0x80220000"
d G "CP2_C3_FVR" 1 458 "0x80230000"
d G "CP2_A1_VSS" 1 459 "0x80300000"
d G "CP2_C1_VSS" 1 460 "0x80310000"
d G "CP2_C2_VSS" 1 461 "0x80320000"
d G "CP2_C3_VSS" 1 462 "0x80330000"
d G "CP2_INT_L2H" 1 464 "0x00800000"
d G "CP2_INT_H2L" 1 465 "0x00400000"
d G "CP2_OUT_ON_C4" 1 466 "0x20000000"
d G "CP2_INVERT" 1 467 "0x10000000"
d G "CP2_FAST" 1 468 "0x04000000"
d G "CP2_HYST" 1 469 "0x02000000"
d G "CP2_SYNC" 1 470 "0x01000000"
c L "setup_comparator" 1 1 2 "FUNCTION"
f N "setup_vref" 1 477 ""
v L "mode" 1 477 "int8" `204 
f B "setup_vref" 1 477 "void(int8 mode)" `203  "Constants used in setup_vref() are:"
d G "VREF_OFF" 1 479 "0"
d G "VREF_ON" 1 480 "0x80"
d G "VREF_ADC_OFF" 1 482 "0"
d G "VREF_ADC_1v024" 1 483 "0x81"
d G "VREF_ADC_2v048" 1 484 "0x82"
d G "VREF_ADC_4v096" 1 485 "0x83"
d G "VREF_COMP_DAC_OFF" 1 487 "0"
d G "VREF_COMP_DAC_1v024" 1 488 "0x84"
d G "VREF_COMP_DAC_2v048" 1 489 "0x88"
d G "VREF_COMP_DAC_4v096" 1 490 "0x8C"
d G "TEMPERATURE_INDICATOR_DISABLED" 1 492 "0"
d G "TEMPERATURE_INDICATOR_ENABLED" 1 493 "0x20"
d G "TEMPERATURE_RANGE_LOW" 1 494 "0"
d G "TEMPERATURE_RANGE_HIGH" 1 495 "0x10"
c L "setup_vref" 1 1 3 "FUNCTION"
f N "setup_dac" 1 500 ""
v L "mode" 1 500 "int8" `206 
f B "setup_dac" 1 500 "void(int8 mode)" `205 
f N "dac_write" 1 501 ""
v L "value" 1 501 "int8" `208 
f B "dac_write" 1 501 "void(int8 value)" `207  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 1 503 "0"
d G "DAC_VSS_VDD" 1 504 "0x80"
d G "DAC_VREF_VDD" 1 505 "0x81"
d G "DAC_VSS_VREF" 1 506 "0x84"
d G "DAC_VREF_VREF" 1 507 "0x85"
d G "DAC_VSS_FVR" 1 508 "0x88"
d G "DAC_VREF_FVR" 1 509 "0x89"
d G "DAC_OUTPUT" 1 511 "0x20"
d G "DAC_LVP_POS" 1 512 "0x40"
d G "DAC_LVP_NEG" 1 513 "0"
c L "dac_write" 1 1 3 "FUNCTION"
f N "setup_dsm" 1 518 ""
v L "enable" 1 518 "int8" `210 
f B "setup_dsm" 1 518 "void(int8 enable)" `209 
f N "setup_dsm" 1 519 ""
v L "mode" 1 519 "int8" `212 
v L "source" 1 519 "int8" `213 
f B "setup_dsm" 1 519 "void(int8 mode,int8 source)" `211 
f N "setup_dsm" 1 520 ""
v L "mode" 1 520 "int8" `215 
v L "source" 1 520 "int8" `216 
v L "carrier" 1 520 "int16" `217 
f B "setup_dsm" 1 520 "void(int8 mode,int8 source,int16 carrier)" `214  "Constants used in SETUP_DSM() first parameter are:"
d G "DSM_ENABLED" 1 522 "0x80"
d G "DSM_DISABLED" 1 523 "0x00"
d G "DSM_OUTPUT_ENABLED" 1 524 "0x40"
d G "DSM_SLEW_RATE_LIMITING_ENABLED" 1 525 "0x20"
d G "DSM_OUTPUT_INVERTED" 1 526 "0x10"
d G "DSM_SOURCE_MANUAL" 1 528 "0x00"
d G "DSM_SOURCE_MDMIN" 1 529 "0x01"
d G "DSM_SOURCE_CCP1" 1 530 "0x02"
d G "DSM_SOURCE_CCP2" 1 531 "0x03"
d G "DSM_SOURCE_CCP3" 1 532 "0x04"
d G "DSM_SOURCE_CCP4" 1 533 "0x05"
d G "DSM_SOURCE_COMP1" 1 534 "0x06"
d G "DSM_SOURCE_COMP2" 1 535 "0x07"
d G "DSM_SOURCE_SPI1" 1 536 "0x08"
d G "DSM_SOURCE_SPI2" 1 537 "0x09"
d G "DSM_SOURCE_UART1" 1 538 "0x0A"
d G "DSM_DISABLE_SOURCE" 1 539 "0x80"
d G "DSM_CARRIER_LOW_VSS" 1 541 "0x0000"
d G "DSM_CARRIER_LOW_MDCIN1" 1 542 "0x0001"
d G "DSM_CARRIER_LOW_MDCIN2" 1 543 "0x0002"
d G "DSM_CARRIER_LOW_REFO" 1 544 "0x0003"
d G "DSM_CARRIER_LOW_CCP1" 1 545 "0x0004"
d G "DSM_CARRIER_LOW_CCP2" 1 546 "0x0005"
d G "DSM_CARRIER_LOW_CCP3" 1 547 "0x0006"
d G "DSM_CARRIER_LOW_CCP4" 1 548 "0x0007"
d G "DSM_SYNC_CARRIER_LOW" 1 549 "0x0020"
d G "DSM_INVERT_CARRIER_LOW" 1 550 "0x0040"
d G "DSM_DISABLE_CARRIER_LOW" 1 551 "0x0080"
d G "DSM_CARRIER_HIGH_VSS" 1 552 "0x0000"
d G "DSM_CARRIER_HIGH_MDCIN1" 1 553 "0x0100"
d G "DSM_CARRIER_HIGH_MDCIN2" 1 554 "0x0200"
d G "DSM_CARRIER_HIGH_REFO" 1 555 "0x0300"
d G "DSM_CARRIER_HIGH_CCP1" 1 556 "0x0400"
d G "DSM_CARRIER_HIGH_CCP2" 1 557 "0x0500"
d G "DSM_CARRIER_HIGH_CCP3" 1 558 "0x0600"
d G "DSM_CARRIER_HIGH_CCP4" 1 559 "0x0700"
d G "DSM_SYNC_CARRIER_HIGH" 1 560 "0x2000"
d G "DSM_INVERT_CARRIER_HIGH" 1 561 "0x4000"
d G "DSM_DISABLE_CARRIER_HIGH" 1 562 "0x8000"
c L "setup_dsm" 1 1 2 "FUNCTION"
f N "setup_oscillator" 1 570 ""
v L "mode" 1 570 "int8" `221 
f B "setup_oscillator" 1 570 "void(int8 mode)" `220  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 573 "0"
d G "OSC_31250" 1 574 " (2*8)"
d G "OSC_62KHZ" 1 575 " (4*8)"
d G "OSC_125KHZ" 1 576 " (5*8)"
d G "OSC_250KHZ" 1 577 " (6*8)"
d G "OSC_500KHZ" 1 578 " (7*8)"
d G "OSC_1MHZ" 1 579 " (11*8)"
d G "OSC_2MHZ" 1 580 " (12*8)"
d G "OSC_4MHZ" 1 581 " (13*8)"
d G "OSC_8MHZ" 1 582 " (14*8)"
d G "OSC_16MHZ" 1 583 " (15*8)"
d G "OSC_TIMER1" 1 585 "1"
d G "OSC_INTRC" 1 586 "2"
d G "OSC_NORMAL" 1 587 "0"
d G "OSC_PLL_ON" 1 589 "0x80"
d G "OSC_PLL_OFF" 1 590 "0"
c L "setup_oscillator" 1 1 4 "FUNCTION"
f N "setup_adc" 1 597 ""
v L "mode" 1 597 "int16" `223 
f B "setup_adc" 1 597 "void(int16 mode)" `222 
f N "read_adc" 1 598 ""
f B "read_adc" 1 598 "int8()" `224 
f N "read_adc" 1 599 ""
v L "mode" 1 599 "int8" `226 
f B "read_adc" 1 599 "int8(int8 mode)" `225 
f N "read_adc" 1 600 ""
f G "read_adc" 1 600 "int16()" `227 
f N "read_adc" 1 601 ""
v L "mode" 1 601 "int8" `228 
f G "read_adc" 1 601 "int16(int8 mode)" `227 
f N "adc_done" 1 602 ""
f B "adc_done" 1 602 "int8(int8 mode)" `227  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 604 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 605 "0x100"
d G "ADC_CLOCK_DIV_4" 1 606 "0x40"
d G "ADC_CLOCK_DIV_8" 1 607 "0x10"
d G "ADC_CLOCK_DIV_32" 1 608 "0x20"
d G "ADC_CLOCK_DIV_16" 1 609 "0x50"
d G "ADC_CLOCK_DIV_64" 1 610 "0x60"
d G "ADC_CLOCK_INTERNAL" 1 611 "0x30" "Internal 2-6us"
c L "adc_done" 1 1 1 "FUNCTION"
f N "setup_adc_ports" 1 614 ""
v L "pins" 1 614 "int32" `229 
f B "setup_adc_ports" 1 614 "void(int32 pins)" `228 
f N "setup_adc_ports" 1 615 ""
v L "pins" 1 615 "int32" `231 
v L "reference" 1 615 "int32" `232 
f B "setup_adc_ports" 1 615 "void(int32 pins,int32 reference)" `230 
f N "set_analog_pins" 1 616 ""
v L "pin" 1 616 "int8" `234 
f B "set_analog_pins" 1 616 "void(int8 pin,*int8 _VA_LIST)" `233 
f N "setup_adc_reference" 1 617 ""
v L "reference" 1 617 "int32" `237 
f B "setup_adc_reference" 1 617 "void(int32 reference)" `236 
f N "set_adc_channel" 1 618 ""
v L "channel" 1 618 "int8" `239 
f B "set_adc_channel" 1 618 "void(int8 channel)" `238  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 1 622 "0x00010000" "| A0"
d G "sAN1" 1 623 "0x00020000" "| A1"
d G "sAN2" 1 624 "0x00040000" "| A2"
d G "sAN3" 1 625 "0x00100000" "| A4"
d G "sAN4" 1 626 "0x00000100" "| C0"
d G "sAN5" 1 627 "0x00000200" "| C1"
d G "sAN6" 1 628 "0x00000400" "| C2"
d G "sAN7" 1 629 "0x00000800" "| C3"
d G "NO_ANALOGS" 1 630 "0" "None"
d G "ALL_ANALOG" 1 631 "0x00170F00" "A0 A1 A2 A4 C0 C1 C2 C3"
d G "VSS_VDD" 1 634 "0x00000000" "| Range 0-Vdd"
d G "VSS_VREF" 1 635 "0x02000000" "| Range 0-VrefH"
d G "VSS_FVR" 1 636 "0x03000000" "| Range 0-Fixed Voltage Reference"
d G "VREF_VDD" 1 637 "0x04000000" "| Range VrefL-Vdd"
d G "VREF_VREF" 1 638 "0x06000000" "| Range VrefL-VrefH"
d G "VREF_FVR" 1 639 "0x07000000" "| Range VrefL-Fixed Voltage Reference"
d G "TEMPERATURE_INDICATOR" 1 643 "0x1D"
d G "DAC_CHANNEL" 1 644 "0x1E"
d G "FVR_CHANNEL" 1 645 "0x1F"
d G "ADC_START_AND_READ" 1 648 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 649 "1"
d G "ADC_READ_ONLY" 1 650 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
f N "abs" 1 656 ""
v L "x" 1 656 "sint8" `241 
f B "abs" 1 656 "sint8(sint8 x)" `240 
f N "abs" 1 657 ""
v L "x" 1 657 "sint16" `243 
f B "abs" 1 657 "sint16(sint16 x)" `242 
f N "abs" 1 658 ""
v L "x" 1 658 "sint32" `245 
f B "abs" 1 658 "sint32(sint32 x)" `244 
f N "abs" 1 659 ""
v L "x" 1 659 "float" `247 
f B "abs" 1 659 "float(float x)" `246 
f N "_mul" 1 660 ""
v L "??65535" 1 660 "int8" `249 
v L "??65535" 1 660 "int8" `250 
f B "_mul" 1 660 "int16(int8 ,int8 )" `248 
f N "_mul" 1 661 ""
v L "??65535" 1 661 "sint8" `252 
v L "??65535" 1 661 "sint8" `253 
f B "_mul" 1 661 "sint16(sint8 ,sint8 )" `251 
f N "_mul" 1 662 ""
v L "??65535" 1 662 "int16" `255 
v L "??65535" 1 662 "int16" `256 
f B "_mul" 1 662 "int32(int16 ,int16 )" `254 
f N "_mul" 1 663 ""
v L "??65535" 1 663 "sint16" `258 
v L "??65535" 1 663 "sint16" `259 
f B "_mul" 1 663 "sint32(sint16 ,sint16 )" `257  "Memory Manipulation Prototypes:"
f N "read_bank" 1 666 ""
v L "bank" 1 666 "int8" `261 
v L "offset" 1 666 "int8" `262 
f B "read_bank" 1 666 "int8(int8 bank,int8 offset)" `260 
f N "write_bank" 1 667 ""
v L "bank" 1 667 "int8" `264 
v L "offset" 1 667 "int8" `265 
v L "value" 1 667 "int8" `266 
f B "write_bank" 1 667 "void(int8 bank,int8 offset,int8 value)" `263 
f N "strcpy" 1 668 ""
v L "dest" 1 668 "*int8" `268 
v L "src" 1 668 "*int8" `269 
f B "strcpy" 1 668 "void(*int8 dest,*int8 src)" `267 
f N "memset" 1 669 ""
v L "destination" 1 669 "*int8" `271 
v L "value" 1 669 "int8" `272 
v L "num" 1 669 "int16" `273 
f B "memset" 1 669 "void(*int8 destination,int8 value,int16 num)" `270 
f N "memcpy" 1 670 ""
v L "destination" 1 670 "*int8" `275 
v L "source" 1 670 "*int8" `276 
v L "num" 1 670 "int16" `277 
f B "memcpy" 1 670 "void(*int8 destination,*int8 source,int16 num)" `274  "String Prototypes:"
f N "toupper" 1 673 ""
v L "cvalue" 1 673 "int8" `279 
f B "toupper" 1 673 "int8(int8 cvalue)" `278 
f N "tolower" 1 674 ""
v L "cvalue" 1 674 "int8" `281 
f B "tolower" 1 674 "int8(int8 cvalue)" `280 
f N "sprintf" 1 675 ""
v L "string" 1 675 "*int8" `283 
v L "cstring" 1 675 "*int8" `284 
f B "sprintf" 1 675 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `282  "Data Manipulators Prototypes:"
f N "shift_left" 1 678 ""
v L "address" 1 678 "*int8" `287 
v L "bytes" 1 678 "int8" `288 
v L "value" 1 678 "int8" `289 
f B "shift_left" 1 678 "int8(*int8 address,int8 bytes,int8 value)" `286 
f N "shift_right" 1 679 ""
v L "address" 1 679 "*int8" `291 
v L "bytes" 1 679 "int8" `292 
v L "value" 1 679 "int8" `293 
f B "shift_right" 1 679 "int8(*int8 address,int8 bytes,int8 value)" `290 
f N "rotate_left" 1 680 ""
v L "address" 1 680 "*int8" `295 
v L "bytes" 1 680 "int8" `296 
f B "rotate_left" 1 680 "void(*int8 address,int8 bytes)" `294 
f N "rotate_right" 1 681 ""
v L "address" 1 681 "*int8" `298 
v L "bytes" 1 681 "int8" `299 
f B "rotate_right" 1 681 "void(*int8 address,int8 bytes)" `297 
f N "swap" 1 682 ""
v L "value" 1 682 "int8" `301 
f B "swap" 1 682 "void(int8 value)" `300 
f N "make8" 1 683 ""
v L "var" 1 683 "int16" `303 
v L "offset" 1 683 "int8" `304 
f B "make8" 1 683 "int8(int16 var,int8 offset)" `302 
f N "make8" 1 684 ""
v L "var" 1 684 "int32" `306 
v L "offset" 1 684 "int8" `307 
f B "make8" 1 684 "int8(int32 var,int8 offset)" `305 
f N "make16" 1 685 ""
v L "varhigh" 1 685 "int8" `309 
v L "varlow" 1 685 "int8" `310 
f B "make16" 1 685 "int16(int8 varhigh,int8 varlow)" `308 
f N "make32" 1 686 ""
v L "var1" 1 686 "int16" `312 
f B "make32" 1 686 "int32(int16 var1)" `311 
f N "make32" 1 687 ""
v L "var1" 1 687 "int16" `314 
v L "var2" 1 687 "int16" `315 
f B "make32" 1 687 "int32(int16 var1,int16 var2)" `313 
f N "make32" 1 688 ""
v L "var1" 1 688 "int16" `317 
v L "var2" 1 688 "int8" `318 
f B "make32" 1 688 "int32(int16 var1,int8 var2)" `316 
f N "make32" 1 689 ""
v L "var1" 1 689 "int16" `320 
v L "var2" 1 689 "int8" `321 
v L "var3" 1 689 "int8" `322 
f B "make32" 1 689 "int32(int16 var1,int8 var2,int8 var3)" `319 
f N "make32" 1 690 ""
v L "var1" 1 690 "int8" `324 
f B "make32" 1 690 "int32(int8 var1)" `323 
f N "make32" 1 691 ""
v L "var1" 1 691 "int8" `326 
v L "var2" 1 691 "int8" `327 
f B "make32" 1 691 "int32(int8 var1,int8 var2)" `325 
f N "make32" 1 692 ""
v L "var1" 1 692 "int8" `329 
v L "var2" 1 692 "int8" `330 
v L "var3" 1 692 "int8" `331 
f B "make32" 1 692 "int32(int8 var1,int8 var2,int8 var3)" `328 
f N "make32" 1 693 ""
v L "var1" 1 693 "int8" `333 
v L "var2" 1 693 "int8" `334 
v L "var3" 1 693 "int8" `335 
v L "var4" 1 693 "int8" `336 
f B "make32" 1 693 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `332 
f N "make32" 1 694 ""
v L "var1" 1 694 "int8" `338 
v L "var2" 1 694 "int16" `339 
f B "make32" 1 694 "int32(int8 var1,int16 var2)" `337 
f N "make32" 1 695 ""
v L "var1" 1 695 "int8" `341 
v L "var2" 1 695 "int16" `342 
v L "var3" 1 695 "int8" `343 
f B "make32" 1 695 "int32(int8 var1,int16 var2,int8 var3)" `340 
f N "make32" 1 696 ""
v L "var1" 1 696 "int8" `345 
v L "var2" 1 696 "int8" `346 
v L "var3" 1 696 "int16" `347 
f B "make32" 1 696 "int32(int8 var1,int8 var2,int16 var3)" `344 
f N "bit_set" 1 697 ""
v L "var" 1 697 "int8" `349 
v L "bit" 1 697 "int8" `350 
f B "bit_set" 1 697 "void(int8 var,int8 bit)" `348 
f N "bit_set" 1 698 ""
v L "var" 1 698 "int16" `352 
v L "bit" 1 698 "int8" `353 
f B "bit_set" 1 698 "void(int16 var,int8 bit)" `351 
f N "bit_set" 1 699 ""
v L "var" 1 699 "int32" `355 
v L "bit" 1 699 "int8" `356 
f B "bit_set" 1 699 "void(int32 var,int8 bit)" `354 
f N "bit_clear" 1 700 ""
v L "var" 1 700 "int8" `358 
v L "bit" 1 700 "int8" `359 
f B "bit_clear" 1 700 "void(int8 var,int8 bit)" `357 
f N "bit_clear" 1 701 ""
v L "var" 1 701 "int16" `361 
v L "bit" 1 701 "int8" `362 
f B "bit_clear" 1 701 "void(int16 var,int8 bit)" `360 
f N "bit_clear" 1 702 ""
v L "var" 1 702 "int32" `364 
v L "bit" 1 702 "int8" `365 
f B "bit_clear" 1 702 "void(int32 var,int8 bit)" `363 
f N "bit_test" 1 703 ""
v L "var" 1 703 "int8" `367 
v L "bit" 1 703 "int8" `368 
f B "bit_test" 1 703 "int8(int8 var,int8 bit)" `366 
f N "bit_test" 1 704 ""
v L "var" 1 704 "int16" `370 
v L "bit" 1 704 "int8" `371 
f B "bit_test" 1 704 "int8(int16 var,int8 bit)" `369 
f N "bit_test" 1 705 ""
v L "var" 1 705 "int32" `373 
v L "bit" 1 705 "int8" `374 
f B "bit_test" 1 705 "int8(int32 var,int8 bit)" `372  "#use delay() Prototypes:"
f N "delay_cycles" 1 708 ""
v L "count" 1 708 "int8" `376 
f B "delay_cycles" 1 708 "void(int8 count)" `375 
f N "delay_ms" 1 709 ""
v L "time" 1 709 "int16" `378 
f B "delay_ms" 1 709 "void(int16 time)" `377 
f N "delay_us" 1 710 ""
v L "time" 1 710 "int16" `380 
f B "delay_us" 1 710 "void(int16 time)" `379  "#use rs232() Prototypes:"
f N "putchar" 1 713 ""
v L "cdata" 1 713 "int8" `382 
f B "putchar" 1 713 "void(int8 cdata)" `381 
f N "putchar" 1 714 ""
v L "cdata" 1 714 "int8" `384 
v L "stream" 1 714 "int8" `385 
f B "putchar" 1 714 "void(int8 cdata,int8 stream)" `383 
f N "puts" 1 715 ""
v L "string" 1 715 "*int8" `387 
f B "puts" 1 715 "void(*int8 string)" `386 
f N "puts" 1 716 ""
v L "string" 1 716 "*int8" `389 
v L "stream" 1 716 "int8" `390 
f B "puts" 1 716 "void(*int8 string,int8 stream)" `388 
f N "getch" 1 717 ""
f B "getch" 1 717 "int8()" `391 
f N "getch" 1 718 ""
v L "stream" 1 718 "int8" `393 
f B "getch" 1 718 "int8(int8 stream)" `392 
f N "gets" 1 719 ""
v L "string" 1 719 "*int8" `395 
f B "gets" 1 719 "void(*int8 string)" `394 
f N "gets" 1 720 ""
v L "string" 1 720 "*int8" `397 
v L "stream" 1 720 "int8" `398 
f B "gets" 1 720 "void(*int8 string,int8 stream)" `396 
f N "kbhit" 1 721 ""
f B "kbhit" 1 721 "int8()" `399 
f N "kbhit" 1 722 ""
v L "stream" 1 722 "int8" `401 
f B "kbhit" 1 722 "int8(int8 stream)" `400 
f N "printf" 1 723 ""
v L "string" 1 723 "*int8" `403 
f B "printf" 1 723 "void(*int8 string,*int8 _VA_LIST)" `402 
f N "fprintf" 1 724 ""
v L "stream" 1 724 "int8" `406 
v L "string" 1 724 "*int8" `407 
f B "fprintf" 1 724 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `405 
f N "putc_send" 1 725 ""
f B "putc_send" 1 725 "void()" `409 
f N "fputc_send" 1 726 ""
v L "stream" 1 726 "int8" `411 
f B "fputc_send" 1 726 "void(int8 stream)" `410 
f N "rcv_buffer_full" 1 727 ""
f B "rcv_buffer_full" 1 727 "int8()" `412 
f N "rcv_buffer_full" 1 728 ""
v L "stream" 1 728 "int8" `414 
f B "rcv_buffer_full" 1 728 "int8(int8 stream)" `413 
f N "rcv_buffer_bytes" 1 729 ""
f B "rcv_buffer_bytes" 1 729 "int16()" `415 
f N "rcv_buffer_bytes" 1 730 ""
v L "stream" 1 730 "int8" `417 
f B "rcv_buffer_bytes" 1 730 "int16(int8 stream)" `416 
f N "tx_buffer_full" 1 731 ""
f B "tx_buffer_full" 1 731 "int8()" `418 
f N "tx_buffer_full" 1 732 ""
v L "stream" 1 732 "int8" `420 
f B "tx_buffer_full" 1 732 "int8(int8 stream)" `419 
f N "tx_buffer_bytes" 1 733 ""
f B "tx_buffer_bytes" 1 733 "int16()" `421 
f N "tx_buffer_bytes" 1 734 ""
v L "stream" 1 734 "int8" `423 
f B "tx_buffer_bytes" 1 734 "int16(int8 stream)" `422  "#use i2c() Prototypes:"
f N "i2c_read" 1 737 ""
f B "i2c_read" 1 737 "int8()" `424 
f N "i2c_read" 1 738 ""
v L "stream" 1 738 "int8" `426 
f B "i2c_read" 1 738 "int8(int8 stream)" `425 
f N "i2c_read" 1 739 ""
v L "stream" 1 739 "int8" `428 
v L "ack" 1 739 "int8" `429 
f B "i2c_read" 1 739 "int8(int8 stream,int8 ack)" `427 
f N "i2c_write" 1 740 ""
v L "data" 1 740 "int8" `431 
f B "i2c_write" 1 740 "int8(int8 data)" `430 
f N "i2c_write" 1 741 ""
v L "stream" 1 741 "int8" `433 
v L "data" 1 741 "int8" `434 
f B "i2c_write" 1 741 "int8(int8 stream,int8 data)" `432 
f N "i2c_start" 1 742 ""
f B "i2c_start" 1 742 "void()" `435 
f N "i2c_start" 1 743 ""
v L "stream" 1 743 "int8" `437 
f B "i2c_start" 1 743 "void(int8 stream)" `436 
f N "i2c_start" 1 744 ""
v L "stream" 1 744 "int8" `439 
v L "restart" 1 744 "int8" `440 
f B "i2c_start" 1 744 "void(int8 stream,int8 restart)" `438 
f N "i2c_stop" 1 745 ""
f B "i2c_stop" 1 745 "void()" `441 
f N "i2c_stop" 1 746 ""
v L "stream" 1 746 "int8" `443 
f B "i2c_stop" 1 746 "void(int8 stream)" `442 
f N "i2c_isr_state" 1 747 ""
f B "i2c_isr_state" 1 747 "int8()" `444 
f N "i2c_slaveaddr" 1 748 ""
v L "addr" 1 748 "int8" `446 
f B "i2c_slaveaddr" 1 748 "void(int8 addr)" `445 
f N "i2c_slaveaddr" 1 749 ""
v L "stream" 1 749 "int8" `448 
v L "addr" 1 749 "int8" `449 
f B "i2c_slaveaddr" 1 749 "void(int8 stream,int8 addr)" `447 
f N "i2c_poll" 1 750 ""
f B "i2c_poll" 1 750 "int8()" `450 
f N "i2c_poll" 1 751 ""
v L "stream" 1 751 "int8" `452 
f B "i2c_poll" 1 751 "int8(int8 stream)" `451 
f N "i2c_init" 1 752 ""
v L "baud" 1 752 "int32" `454 
f B "i2c_init" 1 752 "void(int32 baud)" `453 
f N "i2c_init" 1 753 ""
v L "stream" 1 753 "int8" `456 
v L "baud" 1 753 "int32" `457 
f B "i2c_init" 1 753 "void(int8 stream,int32 baud)" `455  "#use spi() Prototypes:"
f N "spi_xfer" 1 756 ""
f B "spi_xfer" 1 756 "int8()" `458 
f N "spi_xfer" 1 757 ""
f G "spi_xfer" 1 757 "int16()" `459 
f N "spi_xfer" 1 758 ""
f G "spi_xfer" 1 758 "int32()" `459 
f N "spi_xfer" 1 759 ""
v L "data" 1 759 "int8" `460 
f B "spi_xfer" 1 759 "int8(int8 data)" `459 
f N "spi_xfer" 1 760 ""
v L "data" 1 760 "int16" `462 
f B "spi_xfer" 1 760 "int16(int16 data)" `461 
f N "spi_xfer" 1 761 ""
v L "data" 1 761 "int32" `464 
f B "spi_xfer" 1 761 "int32(int32 data)" `463 
f N "spi_xfer" 1 762 ""
v L "stream" 1 762 "int8" `466 
v L "data" 1 762 "int8" `467 
f B "spi_xfer" 1 762 "int8(int8 stream,int8 data)" `465 
f N "spi_xfer" 1 763 ""
v L "stream" 1 763 "int8" `469 
v L "data" 1 763 "int16" `470 
f B "spi_xfer" 1 763 "int16(int8 stream,int16 data)" `468 
f N "spi_xfer" 1 764 ""
v L "stream" 1 764 "int8" `472 
v L "data" 1 764 "int32" `473 
f B "spi_xfer" 1 764 "int32(int8 stream,int32 data)" `471 
f N "spi_xfer" 1 765 ""
v L "stream" 1 765 "int8" `475 
v L "data" 1 765 "int8" `476 
v L "bits" 1 765 "int8" `477 
f B "spi_xfer" 1 765 "int8(int8 stream,int8 data,int8 bits)" `474 
f N "spi_xfer" 1 766 ""
v L "stream" 1 766 "int8" `479 
v L "data" 1 766 "int16" `480 
v L "bits" 1 766 "int8" `481 
f B "spi_xfer" 1 766 "int16(int8 stream,int16 data,int8 bits)" `478 
f N "spi_xfer" 1 767 ""
v L "stream" 1 767 "int8" `483 
v L "data" 1 767 "int32" `484 
v L "bits" 1 767 "int8" `485 
f B "spi_xfer" 1 767 "int32(int8 stream,int32 data,int8 bits)" `482 
f N "spi_init" 1 768 ""
v L "baud" 1 768 "int32" `487 
f B "spi_init" 1 768 "void(int32 baud)" `486 
f N "spi_init" 1 769 ""
v L "stream" 1 769 "int8" `489 
v L "baud" 1 769 "int32" `490 
f B "spi_init" 1 769 "void(int8 stream,int32 baud)" `488 
f N "spi_speed" 1 770 ""
v L "baud" 1 770 "int32" `492 
f B "spi_speed" 1 770 "void(int32 baud)" `491 
f N "spi_speed" 1 771 ""
v L "stream" 1 771 "int8" `494 
v L "baud" 1 771 "int32" `495 
f B "spi_speed" 1 771 "void(int8 stream,int32 baud)" `493 
f N "spi_speed" 1 772 ""
v L "stream" 1 772 "int8" `497 
v L "baud" 1 772 "int32" `498 
v L "clock" 1 772 "int32" `499 
f B "spi_speed" 1 772 "void(int8 stream,int32 baud,int32 clock)" `496 
f N "spi_prewrite" 1 773 ""
v L "data" 1 773 "int8" `501 
f B "spi_prewrite" 1 773 "void(int8 data)" `500 
f N "spi_prewrite" 1 774 ""
v L "data" 1 774 "int16" `503 
f B "spi_prewrite" 1 774 "void(int16 data)" `502 
f N "spi_prewrite" 1 775 ""
v L "data" 1 775 "int32" `505 
f B "spi_prewrite" 1 775 "void(int32 data)" `504 
f N "spi_prewrite" 1 776 ""
v L "??65535" 1 776 "int8" `507 
v L "data" 1 776 "int8" `508 
f B "spi_prewrite" 1 776 "void(int8 ,int8 data)" `506 
f N "spi_prewrite" 1 777 ""
v L "??65535" 1 777 "int8" `510 
v L "data" 1 777 "int16" `511 
f B "spi_prewrite" 1 777 "void(int8 ,int16 data)" `509 
f N "spi_prewrite" 1 778 ""
v L "??65535" 1 778 "int8" `513 
v L "data" 1 778 "int32" `514 
f B "spi_prewrite" 1 778 "void(int8 ,int32 data)" `512 
f N "spi_xfer_in" 1 779 ""
f B "spi_xfer_in" 1 779 "int8()" `515 
f N "spi_xfer_in" 1 780 ""
f G "spi_xfer_in" 1 780 "int16()" `516 
f N "spi_xfer_in" 1 781 ""
f G "spi_xfer_in" 1 781 "int32()" `516 
f N "spi_xfer_in" 1 782 ""
v L "bits" 1 782 "int8" `517 
f B "spi_xfer_in" 1 782 "int8(int8 bits)" `516 
f N "spi_xfer_in" 1 783 ""
v L "bits" 1 783 "int8" `519 
f G "spi_xfer_in" 1 783 "int16(int8 bits)" `518 
f N "spi_xfer_in" 1 784 ""
v L "bits" 1 784 "int8" `519 
f G "spi_xfer_in" 1 784 "int32(int8 bits)" `518 
f N "spi_xfer_in" 1 785 ""
v L "stream" 1 785 "int8" `519 
v L "bits" 1 785 "int8" `520 
f B "spi_xfer_in" 1 785 "int8(int8 stream,int8 bits)" `518 
f N "spi_xfer_in" 1 786 ""
v L "stream" 1 786 "int8" `519 
v L "bits" 1 786 "int8" `523 
f G "spi_xfer_in" 1 786 "int16(int8 stream,int8 bits)" `521 
f N "spi_xfer_in" 1 787 ""
v L "stream" 1 787 "int8" `519 
v L "bits" 1 787 "int8" `523 
f G "spi_xfer_in" 1 787 "int32(int8 stream,int8 bits)" `521  "#use rtos() Prototypes:"
f N "rtos_run" 1 790 ""
f B "rtos_run" 1 790 "void(int8 stream,int8 bits)" `521 
f N "rtos_yield" 1 791 ""
f B "rtos_yield" 1 791 "void(int8 bits)" `522 
f N "rtos_enable" 1 792 ""
v L "task" 1 792 "int8" `524 
f B "rtos_enable" 1 792 "void(int8 task)" `523 
f N "rtos_disable" 1 793 ""
v L "task" 1 793 "int8" `526 
f B "rtos_disable" 1 793 "void(int8 task)" `525 
f N "rtos_terminate" 1 794 ""
f B "rtos_terminate" 1 794 "void()" `527 
f N "rtos_await" 1 795 ""
v L "flag" 1 795 "int8" `529 
f B "rtos_await" 1 795 "void(int8 flag)" `528 
f N "rtos_wait" 1 796 ""
v L "sem" 1 796 "int8" `531 
f B "rtos_wait" 1 796 "void(int8 sem)" `530 
f N "rtos_signal" 1 797 ""
v L "sem" 1 797 "int8" `533 
f B "rtos_signal" 1 797 "void(int8 sem)" `532 
f N "rtos_msg_send" 1 798 ""
v L "task" 1 798 "int8" `535 
v L "msg" 1 798 "int8" `536 
f B "rtos_msg_send" 1 798 "void(int8 task,int8 msg)" `534 
f N "rtos_msg_read" 1 799 ""
f B "rtos_msg_read" 1 799 "int8()" `537 
f N "rtos_msg_poll" 1 800 ""
f B "rtos_msg_poll" 1 800 "int8()" `538 
f N "rtos_overrun" 1 801 ""
v L "task" 1 801 "int8" `540 
f B "rtos_overrun" 1 801 "int8(int8 task)" `539 
f N "rtos_stats" 1 802 ""
v L "task" 1 802 "int8" `542 
v L "stat" 1 802 "*int8" `543 
f B "rtos_stats" 1 802 "void(int8 task,*int8 stat)" `541  "#use timer() Prototypes:"
f N "get_ticks" 1 805 ""
f B "get_ticks" 1 805 "int8()" `544 
f N "get_ticks" 1 806 ""
f G "get_ticks" 1 806 "int16()" `545 
f N "get_ticks" 1 807 ""
f G "get_ticks" 1 807 "int32()" `545 
f N "get_ticks" 1 808 ""
v L "stream" 1 808 "int8" `546 
f B "get_ticks" 1 808 "int8(int8 stream)" `545 
f N "get_ticks" 1 809 ""
v L "stream" 1 809 "int8" `548 
f G "get_ticks" 1 809 "int16(int8 stream)" `547 
f N "get_ticks" 1 810 ""
v L "stream" 1 810 "int8" `548 
f G "get_ticks" 1 810 "int32(int8 stream)" `547 
f N "set_ticks" 1 811 ""
v L "value" 1 811 "int8" `548 
f B "set_ticks" 1 811 "void(int8 value)" `547 
f N "set_ticks" 1 812 ""
v L "value" 1 812 "int16" `550 
f B "set_ticks" 1 812 "void(int16 value)" `549 
f N "set_ticks" 1 813 ""
v L "value" 1 813 "int32" `552 
f B "set_ticks" 1 813 "void(int32 value)" `551 
f N "set_ticks" 1 814 ""
v L "stream" 1 814 "int8" `554 
v L "value" 1 814 "int8" `555 
f B "set_ticks" 1 814 "void(int8 stream,int8 value)" `553 
f N "set_ticks" 1 815 ""
v L "stream" 1 815 "int8" `557 
v L "value" 1 815 "int16" `558 
f B "set_ticks" 1 815 "void(int8 stream,int16 value)" `556 
f N "set_ticks" 1 816 ""
v L "stream" 1 816 "int8" `560 
v L "value" 1 816 "int32" `561 
f B "set_ticks" 1 816 "void(int8 stream,int32 value)" `559  "#use pwm() Prototypes:"
f N "pwm_on" 1 819 ""
f B "pwm_on" 1 819 "void()" `562 
f N "pwm_on" 1 820 ""
v L "stream" 1 820 "int8" `564 
f B "pwm_on" 1 820 "void(int8 stream)" `563 
f N "pwm_off" 1 821 ""
f B "pwm_off" 1 821 "void()" `565 
f N "pwm_off" 1 822 ""
v L "stream" 1 822 "int8" `567 
f B "pwm_off" 1 822 "void(int8 stream)" `566 
f N "pwm_set_duty" 1 823 ""
v L "duty" 1 823 "int16" `569 
f B "pwm_set_duty" 1 823 "void(int16 duty)" `568 
f N "pwm_set_duty" 1 824 ""
v L "stream" 1 824 "int8" `571 
v L "duty" 1 824 "int16" `572 
f B "pwm_set_duty" 1 824 "void(int8 stream,int16 duty)" `570 
f N "pwm_set_duty_percent" 1 825 ""
v L "percent" 1 825 "int16" `574 
f B "pwm_set_duty_percent" 1 825 "void(int16 percent)" `573 
f N "pwm_set_duty_percent" 1 826 ""
v L "stream" 1 826 "int8" `576 
v L "percent" 1 826 "int16" `577 
f B "pwm_set_duty_percent" 1 826 "void(int8 stream,int16 percent)" `575 
f N "pwm_set_frequency" 1 827 ""
v L "frequency" 1 827 "int32" `579 
f B "pwm_set_frequency" 1 827 "void(int32 frequency)" `578 
f N "pwm_set_frequency" 1 828 ""
v L "stream" 1 828 "int8" `581 
v L "frequency" 1 828 "int32" `582 
f B "pwm_set_frequency" 1 828 "void(int8 stream,int32 frequency)" `580  "#use capture() Prototypes:"
f N "get_capture_time" 1 831 ""
f B "get_capture_time" 1 831 "int16()" `583 
f N "get_capture_time" 1 832 ""
v L "stream" 1 832 "int8" `585 
f B "get_capture_time" 1 832 "int16(int8 stream)" `584 
f N "get_capture_event" 1 833 ""
f B "get_capture_event" 1 833 "int8()" `586 
f N "get_capture_event" 1 834 ""
v L "stream" 1 834 "int8" `588 
f B "get_capture_event" 1 834 "int8(int8 stream)" `587  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
f N "goto_address" 1 847 ""
v L "address" 1 847 "int16" `590 
f B "goto_address" 1 847 "void(int16 address)" `589 
f N "label_address" 1 848 ""
v L "label" 1 848 "int16" `592 
f B "label_address" 1 848 "int16(int16 label)" `591  "Program Memory Prototypes:"
f N "read_program_memory" 1 851 ""
v L "address" 1 851 "int16" `594 
v L "dataptr" 1 851 "*int8" `595 
v L "count" 1 851 "int16" `596 
f B "read_program_memory" 1 851 "void(int16 address,*int8 dataptr,int16 count)" `593 
f N "read_program_eeprom" 1 852 ""
v L "address" 1 852 "int16" `598 
f B "read_program_eeprom" 1 852 "int16(int16 address)" `597 
f N "read_configuration_memory" 1 853 ""
v L "dataptr" 1 853 "*int8" `600 
v L "count" 1 853 "int8" `601 
f B "read_configuration_memory" 1 853 "void(*int8 dataptr,int8 count)" `599 
f N "read_configuration_memory" 1 854 ""
v L "offset" 1 854 "int8" `603 
v L "dataptr" 1 854 "*int8" `604 
v L "count" 1 854 "int8" `605 
f B "read_configuration_memory" 1 854 "void(int8 offset,*int8 dataptr,int8 count)" `602 
f N "read_configuration_memory" 1 855 ""
v L "dataptr" 1 855 "*int8" `600 
v L "count" 1 855 "int8" `608 
f G "read_configuration_memory" 1 855 "void(*int8 dataptr,int8 count)" `606 
f N "read_configuration_memory" 1 856 ""
v L "offset" 1 856 "int8" `603 
v L "dataptr" 1 856 "*int8" `604 
v L "count" 1 856 "int8" `609 
f G "read_configuration_memory" 1 856 "void(int8 offset,*int8 dataptr,int8 count)" `606 
f N "write_program_memory" 1 857 ""
v L "address" 1 857 "int16" `607 
v L "dataptr" 1 857 "*int8" `608 
v L "count" 1 857 "int16" `609 
f B "write_program_memory" 1 857 "void(int16 address,*int8 dataptr,int16 count)" `606 
f N "write_program_eeprom" 1 858 ""
v L "address" 1 858 "int16" `611 
v L "data" 1 858 "int16" `612 
f B "write_program_eeprom" 1 858 "void(int16 address,int16 data)" `610 
f N "write_configuration_memory" 1 859 ""
v L "dataptr" 1 859 "*int8" `614 
v L "count" 1 859 "int8" `615 
f B "write_configuration_memory" 1 859 "void(*int8 dataptr,int8 count)" `613 
f N "write_configuration_memory" 1 860 ""
v L "offset" 1 860 "int8" `617 
v L "dataptr" 1 860 "*int8" `618 
v L "count" 1 860 "int8" `619 
f B "write_configuration_memory" 1 860 "void(int8 offset,*int8 dataptr,int8 count)" `616 
f N "write_configuration_memory" 1 861 ""
v L "dataptr" 1 861 "*int8" `614 
v L "count" 1 861 "int8" `622 
f G "write_configuration_memory" 1 861 "void(*int8 dataptr,int8 count)" `620 
f N "write_configuration_memory" 1 862 ""
v L "offset" 1 862 "int8" `617 
v L "dataptr" 1 862 "*int8" `618 
v L "count" 1 862 "int8" `623 
f G "write_configuration_memory" 1 862 "void(int8 offset,*int8 dataptr,int8 count)" `620  "EEPROM Prototypes:"
d G "__EEADDRESS__" 1 867 "unsigned int16"
f N "read_eeprom" 1 872 ""
v L "address" 1 872 "int16" `621 
f B "read_eeprom" 1 872 "int8(int16 address,*int8 dataptr,int8 count)" `620 
f N "write_eeprom" 1 873 ""
v L "address" 1 873 "int16" `623 
v L "value" 1 873 "int8" `624 
f B "write_eeprom" 1 873 "void(int16 address,int8 value)" `622  "#use touchpad() Prototypes:"
f N "touchpad_state" 1 876 ""
v L "state" 1 876 "int8" `626 
f B "touchpad_state" 1 876 "void(int8 state)" `625 
f N "touchpad_getc" 1 877 ""
f B "touchpad_getc" 1 877 "int8()" `627 
f N "touchpad_hit" 1 878 ""
f B "touchpad_hit" 1 878 "int8()" `628  "INT"
c L "touchpad_hit" 1 1 4 "FUNCTION"
f N "enable_interrupts" 1 884 ""
v L "interrupt" 1 884 "int32" `630 
f B "enable_interrupts" 1 884 "void(int32 interrupt)" `629 
f N "disable_interrupts" 1 885 ""
v L "interrupt" 1 885 "int32" `632 
f B "disable_interrupts" 1 885 "void(int32 interrupt)" `631 
f N "clear_interrupt" 1 886 ""
v L "interrupt" 1 886 "int32" `634 
f B "clear_interrupt" 1 886 "void(int32 interrupt)" `633 
f N "interrupt_active" 1 887 ""
v L "interrupt" 1 887 "int32" `636 
f B "interrupt_active" 1 887 "int8(int32 interrupt)" `635 
f N "interrupt_enabled" 1 888 ""
v L "interrupt" 1 888 "int32" `638 
f B "interrupt_enabled" 1 888 "int8(int32 interrupt)" `637 
f N "ext_int_edge" 1 889 ""
v L "source" 1 889 "int8" `640 
v L "edge" 1 889 "int8" `641 
f B "ext_int_edge" 1 889 "void(int8 source,int8 edge)" `639 
f N "jump_to_isr" 1 890 ""
v L "address" 1 890 "int16" `643 
f B "jump_to_isr" 1 890 "void(int16 address)" `642  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 892 "0x40"
d G "H_TO_L" 1 893 "0"
d G "GLOBAL" 1 895 "0x0BC0"
d G "PERIPH" 1 896 "0x0B40"
d G "INT_EXT_L2H" 1 897 "0x50000B10"
d G "INT_EXT_H2L" 1 898 "0x60000B10"
d G "INT_EXT" 1 899 "0x300B10"
d G "INT_TIMER0" 1 900 "0x300B20"
d G "INT_TIMER1" 1 901 "0x309101"
d G "INT_TIMER2" 1 902 "0x309102"
d G "INT_CCP1" 1 903 "0x309104"
d G "INT_SSP" 1 904 "0x309108"
d G "INT_TBE" 1 905 "0x309110"
d G "INT_RDA" 1 906 "0x309120"
d G "INT_AD" 1 907 "0x309140"
d G "INT_TIMER1_GATE" 1 908 "0x309180"
d G "INT_BUSCOL" 1 909 "0x309208"
d G "INT_EEPROM" 1 910 "0x309210"
d G "INT_COMP" 1 911 "0x309220"
d G "INT_COMP2" 1 912 "0x309240"
d G "INT_OSC_FAIL" 1 913 "0x309280"
d G "INT_TIMER4" 1 914 "0x309302"
d G "INT_TIMER6" 1 915 "0x309308"
d G "INT_CCP3" 1 916 "0x309310"
d G "INT_CCP4" 1 917 "0x309320"
d G "INT_CCP2" 1 918 "0x309201"
d G "INT_RA" 1 919 "0x30FF0B08"
d G "INT_RA0" 1 920 "0x30010B08"
d G "INT_RA0_L2H" 1 921 "0x10010B08"
d G "INT_RA0_H2L" 1 922 "0x20010B08"
d G "INT_RA1" 1 923 "0x30020B08"
d G "INT_RA1_L2H" 1 924 "0x10020B08"
d G "INT_RA1_H2L" 1 925 "0x20020B08"
d G "INT_RA2" 1 926 "0x30040B08"
d G "INT_RA2_L2H" 1 927 "0x10040B08"
d G "INT_RA2_H2L" 1 928 "0x20040B08"
d G "INT_RA3" 1 929 "0x30080B08"
d G "INT_RA3_L2H" 1 930 "0x10080B08"
d G "INT_RA3_H2L" 1 931 "0x20080B08"
d G "INT_RA4" 1 932 "0x30100B08"
d G "INT_RA4_L2H" 1 933 "0x10100B08"
d G "INT_RA4_H2L" 1 934 "0x20100B08"
d G "INT_RA5" 1 935 "0x30200B08"
d G "INT_RA5_L2H" 1 936 "0x10200B08"
d G "INT_RA5_H2L" 1 937 "0x20200B08"
D G "_STDINT" 2 19 ""
C L "jump_to_isr" 2 2 1 "FUNCTION"
T G "int8_t" 2 23 "sint8" `644 
T G "uint8_t" 2 24 "int8" `645 
T G "int16_t" 2 25 "sint16" `646 
T G "uint16_t" 2 26 "int16" `647 
T G "int32_t" 2 27 "sint32" `648 
T G "uint32_t" 2 28 "int32" `649 
D G "INT8_MAX" 2 37 " (127)"
D G "INT8_MIN" 2 38 " (-128)"
D G "UINT8_MAX" 2 39 " (255)"
D G "INT16_MAX" 2 41 " (32767)"
D G "INT16_MIN" 2 42 " (-32768)"
D G "UINT16_MAX" 2 43 " (65535)"
D G "INT32_MAX" 2 45 " (2147483647)"
D G "INT32_MIN" 2 46 " (-2147483648)"
D G "UINT32_MAX" 2 47 " (4294967295)"
C L "jump_to_isr" 2 2 1 "FUNCTION"
T G "int_least8_t" 2 61 "sint8" `650 
T G "uint_least8_t" 2 62 "int8" `651 
T G "int_least16_t" 2 63 "sint16" `652 
T G "uint_least16_t" 2 64 "int16" `653 
T G "int_least32_t" 2 65 "sint32" `654 
T G "uint_least32_t" 2 66 "int32" `655 
D G "INT_LEAST8_MAX" 2 75 " (127)"
D G "INT_LEAST8_MIN" 2 76 " (-128)"
D G "UINT_LEAST8_MAX" 2 77 " (255)"
D G "INT_LEAST16_MAX" 2 79 " (32767)"
D G "INT_LEAST16_MIN" 2 80 " (-32768)"
D G "UINT_LEAST16_MAX" 2 81 " (65535)"
D G "INT_LEAST32_MAX" 2 83 " (2147483647)"
D G "INT_LEAST32_MIN" 2 84 " (-2147483648)"
D G "UINT_LEAST32_MAX" 2 85 " (4294967295)"
C L "jump_to_isr" 2 2 1 "FUNCTION"
T G "int_fast8_t" 2 112 "sint8" `656 
T G "uint_fast8_t" 2 113 "int8" `657 
D G "INT_FAST8_MAX" 2 114 " (127)"
D G "INT_FAST8_MIN" 2 115 " (-128)"
D G "UINT_FAST8_MAX" 2 116 " (255)"
T G "int_fast16_t" 2 117 "sint16" `658 
T G "uint_fast16_t" 2 118 "int16" `659 
T G "int_fast32_t" 2 121 "sint32" `660 
T G "uint_fast32_t" 2 122 "int32" `661 
D G "INT_FAST16_MAX" 2 124 " (32767)"
D G "INT_FAST16_MIN" 2 125 " (-32768)"
D G "UINT_FAST16_MAX" 2 126 " (65535)"
D G "INT_FAST32_MAX" 2 128 " (2147483647)"
D G "INT_FAST32_MIN" 2 129 " (-2147483648)"
D G "UINT_FAST32_MAX" 2 130 " (4294967295)"
C L "jump_to_isr" 2 2 9 "FUNCTION"
F N "main" 0 17 ""
F G "main" 0 17 "void()" `670 
C L "main" 0 20 1 "FUNCTION"
F N "Rx_Da_INT" 0 34 ""
F G "Rx_Da_INT" 0 34 "void()" `673 
V L "c" 0 35 "int8" `674 
F N "Tx_Be_INT" 0 40 ""
F G "Tx_Be_INT" 0 40 "void()" `675 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_c" 0 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "port_c_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "set_analog_pins" 0 255
F B "setup_adc_reference" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "setup_dsm" 1 3
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
